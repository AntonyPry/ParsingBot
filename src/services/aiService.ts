import OpenAI from 'openai';
import { IEgrzRecord } from '../types/egrz.types';
import moment from 'moment';
import { logger } from '../logger';

// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiKey = process.env.OPENAI_API_KEY;

if (!apiKey) {
	logger.warn('–í–ù–ò–ú–ê–ù–ò–ï: API-–∫–ª—é—á –¥–ª—è OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ. AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.');
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
const client = new OpenAI({
	apiKey: apiKey,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è retry –ª–æ–≥–∏–∫–∏
const AI_CONFIG = {
	MAX_RETRIES: 3,
	RETRY_DELAY: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
	REQUEST_TIMEOUT: 60000, // 60 —Å–µ–∫—É–Ω–¥
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–¥–µ —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param leadData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ï–ì–†–ó.
 * @param region - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.
 * @returns - –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
 */
export async function processLeadWithAI(leadData: IEgrzRecord, region: string): Promise<string> {
	logger.info(`[AI] –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –¥–ª—è –∑–∞–ø–∏—Å–∏ "${leadData['–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã']}"`);
	
	const formattedDate = moment(leadData['–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã'], 'DD.MM.YYYY').format('DD.MM.YYYY');
	
	// –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ—è AI
	const fallbackText = `–ù–æ–≤—ã–π –ª–∏–¥ –∑–∞ ${formattedDate} (—Ä–µ–≥–∏–æ–Ω: ${region})
–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è: ${leadData['–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã']}
–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: ${leadData['–°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–µ, –æ–±–µ—Å–ø–µ—á–∏–≤—à–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏']}`;
	
	if (!apiKey) {
		logger.debug('[AI] API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ç–µ–∫—Å—Ç');
		return fallbackText;
	}
	
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if (!leadData['–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã']?.trim()) {
		logger.warn('[AI] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã');
		return fallbackText;
	}
	
	// –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
	for (let attempt = 1; attempt <= AI_CONFIG.MAX_RETRIES; attempt++) {
		try {
			logger.debug(`[AI] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${AI_CONFIG.MAX_RETRIES} –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI API`);
			
			const result = await callOpenAIWithTimeout(leadData, region, formattedDate);
			
			if (result && validateAIResponse(result)) {
				logger.info(`[AI] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
				return result;
			} else {
				logger.warn(`[AI] –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
				if (attempt === AI_CONFIG.MAX_RETRIES) {
					logger.error('[AI] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback');
					return fallbackText;
				}
			}
			
		} catch (error: any) {
			const isLastAttempt = attempt === AI_CONFIG.MAX_RETRIES;
			
			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
			if (error.code === 'insufficient_quota') {
				logger.error('[AI] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API');
				return fallbackText;
			}
			
			if (error.code === 'rate_limit_exceeded') {
				logger.warn(`[AI] Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
				if (!isLastAttempt) {
					await sleep(AI_CONFIG.RETRY_DELAY * attempt); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
					continue;
				}
			}
			
			if (error.name === 'AbortError' || error.code === 'ECONNABORTED') {
				logger.warn(`[AI] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
				if (!isLastAttempt) {
					await sleep(AI_CONFIG.RETRY_DELAY);
					continue;
				}
			}
			
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —Ä–µ—à–∞–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
			logger.error(`[AI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, {
				message: error.message,
				code: error.code,
				type: error.type,
				status: error.status,
			});
			
			if (isLastAttempt) {
				logger.error('[AI] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback');
				return fallbackText;
			}
			
			// –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
			await sleep(AI_CONFIG.RETRY_DELAY);
		}
	}
	
	return fallbackText;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
async function callOpenAIWithTimeout(leadData: IEgrzRecord, region: string, formattedDate: string): Promise<string> {
	const prompt = generatePrompt(leadData, region, formattedDate);
	
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	const timeoutPromise = new Promise<never>((_, reject) => {
		setTimeout(() => reject(new Error('OpenAI request timeout')), AI_CONFIG.REQUEST_TIMEOUT);
	});
	
	const apiPromise = client.chat.completions.create({
		model: 'gpt-4o-mini',
		messages: [{ role: 'system', content: prompt }],
		temperature: 0.1,
		max_tokens: 1500, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
	});
	
	const response = await Promise.race([apiPromise, timeoutPromise]);
	
	return response.choices[0]?.message?.content?.trim() || '';
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
 */
function generatePrompt(leadData: IEgrzRecord, region: string, formattedDate: string): string {
	return `
–¢–≤–æ—è —Ä–æ–ª—å ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç, —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ü–û–õ–ù–û–°–¢–¨–Æ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º.

**–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–•:**
1.  **"–ö—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é" –∏ "–°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–µ":**
    * –ò–∑–≤–ª–µ–∫–∏ –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ: —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É (–û–û–û, –ê–û –∏ —Ç.–¥.), –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏ –ò–ù–ù. **–í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–π –ò–ù–ù.**
    * **–£–±–∏—Ä–∞–π –û–ì–†–ù**, –µ—Å–ª–∏ –µ—Å—Ç—å –ò–ù–ù.
    * **–î–ª—è –ò–ü:** –û—Å—Ç–∞–≤–ª—è–π –§–ò–û –∏ –û–ì–†–ù–ò–ü.
    * –°–æ–∫—Ä–∞—â–∞–π –∞–¥—Ä–µ—Å (—É–±–∏—Ä–∞–π "–†–æ—Å—Å–∏—è", "–ú–ï–°–¢–û –ù–ê–•–û–ñ–î–ï–ù–ò–Ø", –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏).
    * **–ü—Ä–∏–º–µ—Ä:** '–û–û–û "–ù–∞–∑–≤–∞–Ω–∏–µ" (–ò–ù–ù: 1234567890, –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1)'
    * **–ü—Ä–∏–º–µ—Ä –¥–ª—è –ò–ü:** '–ò–ü –ò–≤–∞–Ω–æ–≤ –ò.–ò. (–û–ì–†–ù–ò–ü: 321098765432101, –í–æ–ª–æ–≥–¥–∞, —É–ª. –ú–∏—Ä–∞, –¥. 1)'

2.  **"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞":**
    * –£–±–µ—Ä–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–ª–æ–≤ "–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:". –û—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.

---
**–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.**

**–§–û–†–ú–ê–¢ –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–ï–¢–ê:**
–ù–æ–≤—ã–π –ª–∏–¥ –∑–∞ ${formattedDate} (—Ä–µ–≥–∏–æ–Ω: ${region.split(' - ')[0]})

–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: ${leadData['–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã']}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${leadData['–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã)']}

üèôÔ∏è –ö—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:
–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ${leadData['–°–≤–µ–¥–µ–Ω–∏—è –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è—Ö –∏ (–∏–ª–∏) —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü–∞—Ö, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–≤—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é']}

üè† –°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–µ:
–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ${leadData['–°–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–µ, –æ–±–µ—Å–ø–µ—á–∏–≤—à–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏']}

üè≠ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:
–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ${leadData['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å (–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ) –æ–±—ä–µ–∫—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']}
`;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI
 */
function validateAIResponse(response: string): boolean {
	if (!response || response.length < 50) {
		logger.warn('[AI] –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
		return false;
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	const requiredElements = [
		'–ù–æ–º–µ—Ä –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:',
		'üèôÔ∏è',
		'üè†',
		'üè≠',
	];
	
	for (const element of requiredElements) {
		if (!response.includes(element)) {
			logger.warn(`[AI] –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${element}`);
			return false;
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –æ—Ç AI
	const invalidPhrases = [
		'—è –Ω–µ –º–æ–≥—É',
		'–∏–∑–≤–∏–Ω–∏—Ç–µ',
		'–Ω–µ —É–¥–∞–ª–æ—Å—å',
		'–æ—à–∏–±–∫–∞',
		'–∫–∞–∫ AI',
		'–∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
	];
	
	const lowerResponse = response.toLowerCase();
	for (const phrase of invalidPhrases) {
		if (lowerResponse.includes(phrase)) {
			logger.warn(`[AI] –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É: ${phrase}`);
			return false;
		}
	}
	
	return true;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—É–∑—ã
 */
function sleep(ms: number): Promise<void> {
	return new Promise(resolve => setTimeout(resolve, ms));
}