import TelegramBot from 'node-telegram-bot-api';
import { config } from './config';
import { REGIONS } from './constants/regions';
import { Configuration } from './database/models/Configuration';
import { User } from './database/models/User';
import { logger } from './logger';
import { triggerImmediateParse } from './scheduler';
import { IUserConfig } from './types/config.types';

if (!config.BOT_TOKEN) {
	throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
const userAction = new Map<
	number,
	'add_region' | 'remove_region' | 'awaiting_username'
>();

export const bot = new TelegramBot(config.BOT_TOKEN, { polling: true });

// =============================================================================
// –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê
// =============================================================================

const ADMIN_KEYBOARD = {
	reply_markup: {
		keyboard: [
			[{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω' }, { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω' }],
			[{ text: '–ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã' }],
			[
				{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
				{ text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
			],
		],
		resize_keyboard: true,
	},
};

const USER_KEYBOARD = {
	reply_markup: {
		keyboard: [
			[{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω' }, { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω' }],
			[{ text: '–ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã' }],
		],
		resize_keyboard: true,
	},
};

const GUEST_KEYBOARD = {
	reply_markup: { keyboard: [[{ text: '/start' }]], resize_keyboard: true }
};

// Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
const COMMAND_BUTTONS = new Set([
	'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω', '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω', '–ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã',
	'‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
]);

function isAdmin(userId: number): boolean {
	return config.ADMIN_TELEGRAM_IDS.includes(userId);
}

async function isRegistered(username?: string): Promise<boolean> {
	if (!username) return false;
	const user = await User.findOne({ where: { username } });
	return !!user;
}

async function isActivated(userId: number): Promise<boolean> {
	const user = await User.findOne({ where: { userId } });
	return !!user;
}

async function hasAccess(userId: number, username?: string): Promise<'admin' | 'activated' | 'registered' | 'none'> {
	if (isAdmin(userId)) return 'admin';
	if (await isActivated(userId)) return 'activated';
	if (await isRegistered(username)) return 'registered';
	return 'none';
}

bot.on('message', async (msg) => {
	const chatId = msg.chat.id;
	const username = msg.from?.username;
	const text = (msg.text || '').trim();
	
	// === 1) –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /start –ø–µ—Ä–≤—ã–º, –¥–æ –≥–µ–π—Ç–∫–∏–ø–µ—Ä–∞ ===
	if (text === '/start') {
		// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
		const userInDb = username
			? await User.findOne({ where: { username } })
			: null;
		
		// –ï—Å–ª–∏ –æ–Ω –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
		if (userInDb && !userInDb.userId) {
			userInDb.userId = chatId;
			await userInDb.save();
			
			const welcomeMsg = isAdmin(chatId)
				? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.'
				: '–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.';
			const kb = isAdmin(chatId) ? ADMIN_KEYBOARD : USER_KEYBOARD;
			
			await bot.sendMessage(chatId, welcomeMsg, kb);
		} else {
			// –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
			const access = isAdmin(chatId) || await isActivated(chatId)
				? 'ok' : 'wait';
			if (access === 'ok') {
				const kb = isAdmin(chatId) ? ADMIN_KEYBOARD : USER_KEYBOARD;
				await bot.sendMessage(
					chatId,
					isAdmin(chatId)
						? '–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É.'
						: '–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É.',
					kb
				);
			} else {
				// –ù–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –∞–¥–º–∏–Ω ‚Äî –ø—Ä–æ—Å–∏–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø
				await bot.sendMessage(
					chatId,
					'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /start',
					GUEST_KEYBOARD
				);
			}
		}
		return; // –¥–∞–ª—å—à–µ –≤ —ç—Ç–æ–º –∞–ø–¥–µ–π—Ç–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –ø—É—Å–∫–∞–µ–º
	}
	
	// === 2) –ì–µ–π—Ç–∫–∏–ø–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ ===
	const access = await hasAccess(chatId, username);
	if (access !== 'admin' && access !== 'activated') {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É /start
		await bot.sendMessage(
			chatId,
			access === 'registered'
				? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞.'
				: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /start',
			GUEST_KEYBOARD
		);
		return;
	}
	
	try {
		// const chatId = msg.chat.id;
		// const text = (msg.text || '').trim();
		//
		// // --- –ì–ª–∞–≤–Ω—ã–π –≥–µ–π—Ç–∫–∏–ø–µ—Ä ---
		// if (!(await hasAccess(chatId, msg.from?.username))) {
		// 	await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
		// 	logger.warn(
		// 		`[AUTH] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} (${msg.from?.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.`,
		// 	);
		// 	return;
		// }
		
		// const access = await hasAccess(chatId, msg.from?.username);
		//
		// if (access === 'none' || access === 'registered') {
		// 	// –≥–æ—Å—Ç—å –∏–ª–∏ –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª /start
		// 	await bot.sendMessage(chatId,
		// 		access === 'registered'
		// 			? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.'
		// 			: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /start',
		// 		GUEST_KEYBOARD
		// 	);
		// 	return;
		// }
		
		// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏) ---
		if (userAction.has(chatId)) {
			// –ï—Å–ª–∏ –±–æ—Ç –∂–¥–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
			if (COMMAND_BUTTONS.has(text) || text === '/start') {
				userAction.delete(chatId);
				logger.debug(`–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.`);
			} else {
				// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
				const action = userAction.get(chatId);
				userAction.delete(chatId);
				
				if (action === 'add_region' && text) {
					await handleAddRegion(chatId, text);
				} else if (action === 'awaiting_username' && text) {
					await handleAddUsername(msg);
				}
				return; // –ó–∞–≤–µ—Ä—à–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ switch-case –Ω–∏–∂–µ
			}
		}
		
		if (!text) return; // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è - –≤—ã—Ö–æ–¥–∏–º
		
		// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–æ–∫ ---
		switch (text) {
			case '/start':
				// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –õ–æ–≥–∏–∫–∞ "–∞–∫—Ç–∏–≤–∞—Ü–∏–∏" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
				const userInDb = await User.findOne({
					where: { username: msg.from?.username },
				});
				if (userInDb && !userInDb.userId && msg.from?.id) {
					userInDb.userId = msg.from.id;
					await userInDb.save();
				}
				
				const welcomeMessage = isAdmin(chatId)
					? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.'
					: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–º–∏.';
				const keyboard = isAdmin(chatId) ? ADMIN_KEYBOARD : USER_KEYBOARD;
				await bot.sendMessage(chatId, welcomeMessage, keyboard);
				break;
			// –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
			case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω':
				userAction.set(chatId, 'add_region');
				await bot.sendMessage(
					chatId,
					'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 78 - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥).',
				);
				break;
			case '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω':
				await showRegionsForDeletion(chatId);
				break;
			case '–ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã':
				await showMyRegions(chatId);
				break;
			
			// –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
				if (isAdmin(chatId)) {
					// –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
					userAction.set(chatId, 'awaiting_username');
					await bot.sendMessage(
						chatId,
						'–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username), –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.',
					);
				}
				break;
			case 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
				if (isAdmin(chatId)) {
					await showUsersForDeletion(chatId);
				}
				break;
		}
	} catch (error) {
		logger.error(`[BOT_MESSAGE_HANDLER] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
		if (msg && msg.chat) {
			await bot.sendMessage(
				msg.chat.id,
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
			);
		}
	}
});

// =============================================================================
// –ù–û–í–´–ô –ë–õ–û–ö: –õ–û–ì–ò–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø
// =============================================================================

async function handleAddUsername(msg: TelegramBot.Message) {
	const adminId = msg.chat.id;
	let username = (msg.text || '').trim();
	
	// –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '@', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if (username.startsWith('@')) {
		username = username.substring(1);
	}
	
	if (!username) {
		await bot.sendMessage(adminId, '–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
		userAction.set(adminId, 'awaiting_username');
		return;
	}
	
	try {
		const [user, created] = await User.findOrCreate({
			where: { username: username },
			// ID –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º, —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
			defaults: { username: username, userId: null },
		});
		
		if (created) {
			logger.info(
				`[ADMIN] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminId} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.`,
			);
			await bot.sendMessage(
				adminId,
				`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.\n\n` +
				`‚ùóÔ∏è–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –Ω–∞–π—Ç–∏ –±–æ—Ç –∏ –Ω–∞–∂–∞—Ç—å /start, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.`,
			);
		} else {
			await bot.sendMessage(
				adminId,
				`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —É–∂–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ.`,
			);
		}
	} catch (error) {
		logger.error(
			`[ADMIN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}:`,
			error,
		);
		await bot.sendMessage(
			adminId,
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.',
		);
	}
}

async function showUsersForDeletion(adminId: number) {
	if (!isAdmin(adminId)) return;
	
	const users = await User.findAll();
	if (users.length === 0) {
		await bot.sendMessage(adminId, '–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
		return;
	}
	
	const inlineKeyboard = users.map((user) => {
		const userIdText = user.userId ? `(${user.userId})` : '(–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)';
		return [{
			text: `‚ùå @${user.username} ${userIdText}`,
			callback_data: `delete_user:${user.id}`,
		}]
	});
	
	await bot.sendMessage(
		adminId,
		'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–∞:',
		{
			reply_markup: { inline_keyboard: inlineKeyboard },
		}
	);
}

// =============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK-–ó–ê–ü–†–û–°–û–í (–ö–ù–û–ü–û–ö)
// =============================================================================

bot.on('callback_query', async (callbackQuery) => {
	try {
		const message = callbackQuery.message;
		if (!message) return;
		const chatId = message.chat.id;
		const data = callbackQuery.data;
		
		// --- –ò —Å–Ω–æ–≤–∞ –≥–µ–π—Ç–∫–∏–ø–µ—Ä ---
		if (!(await hasAccess(chatId))) {
			await bot.answerCallbackQuery(callbackQuery.id, {
				text: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.',
			});
			return;
		}
		
		// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
		if (data?.startsWith('delete_region:')) {
			await handleDeleteRegion(
				chatId,
				callbackQuery.id,
				message.message_id,
				data,
			);
		}
		
		// –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		else if (data?.startsWith('delete_user:')) {
			if (!isAdmin(chatId)) {
				await bot.answerCallbackQuery(callbackQuery.id, {
					text: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
				});
				return;
			}
			await handleDeleteUser(
				chatId,
				callbackQuery.id,
				message.message_id,
				data,
			);
		}
	} catch (error) {
		logger.error(`[BOT_CALLBACK_HANDLER] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
		if (callbackQuery.message) {
			await bot.sendMessage(
				callbackQuery.message.chat.id,
				'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
			);
		}
	}
});

// --- –•–µ–ª–ø–µ—Ä—ã ---

async function getUserConfig(chatId: number): Promise<IUserConfig> {
	const config = await Configuration.findOne({ where: { userId: chatId } });
	if (config?.configData) {
		try {
			const parsed = JSON.parse(config.configData);
			if (Array.isArray(parsed.regions)) {
				return parsed;
			}
		} catch (e) {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
		}
	}
	return { regions: [] };
}

async function saveUserConfig(chatId: number, userConfig: IUserConfig) {
	await Configuration.upsert({
		userId: chatId,
		configData: JSON.stringify(userConfig),
	});
}

// --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ ---
async function handleAddRegion(chatId: number, regionCode: string) {
	const regionName = REGIONS[regionCode];
	if (!regionName) {
		await bot.sendMessage(chatId, '–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
		return;
	}
	
	const regionValue = `${regionName} - ${regionCode}`;
	const config = await getUserConfig(chatId);
	
	if (config.regions.includes(regionValue)) {
		await bot.sendMessage(
			chatId,
			`–†–µ–≥–∏–æ–Ω "${regionName}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.`,
		);
		return;
	}
	
	config.regions.push(regionValue);
	await saveUserConfig(chatId, config);
	
	// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	const keyboard = isAdmin(chatId) ? ADMIN_KEYBOARD : USER_KEYBOARD;
	await bot.sendMessage(
		chatId,
		`‚úÖ –†–µ–≥–∏–æ–Ω "${regionName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`,
		keyboard,
	);
	// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
	
	// --- –ë–ª–æ–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
	await bot.sendMessage(
		chatId,
		'üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ–º—É —Ä–µ–≥–∏–æ–Ω—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...',
	);
	await triggerImmediateParse(regionValue, chatId);
}

// --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ ---
async function showRegionsForDeletion(chatId: number) {
	const config = await getUserConfig(chatId);
	if (config.regions.length === 0) {
		// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
		// –¢–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		const keyboard = isAdmin(chatId) ? ADMIN_KEYBOARD : USER_KEYBOARD;
		await bot.sendMessage(
			chatId,
			'–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.',
			keyboard,
		);
		// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
		return;
	}
	
	const inlineKeyboard = config.regions.map((region) => [
		{
			text: `‚ùå ${region}`,
			callback_data: `delete_region:${region}`,
		},
	]);
	
	await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω, —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å:', {
		reply_markup: {
			inline_keyboard: inlineKeyboard,
		},
	});
}

async function showMyRegions(chatId: number) {
	const currentConfig = await getUserConfig(chatId);
	if (currentConfig.regions.length === 0) {
		await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.');
	} else {
		await bot.sendMessage(
			chatId,
			`–í–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã:\n- ${currentConfig.regions.join('\n- ')}`,
		);
	}
}

async function handleDeleteRegion(
	chatId: number,
	callbackQueryId: string,
	messageId: number,
	data: string,
) {
	const regionToDelete = data.substring('delete_region:'.length);
	const config = await getUserConfig(chatId);
	
	config.regions = config.regions.filter((r) => r !== regionToDelete);
	await saveUserConfig(chatId, config);
	
	await bot.answerCallbackQuery(callbackQueryId, {
		text: `–†–µ–≥–∏–æ–Ω "${regionToDelete}" —É–¥–∞–ª–µ–Ω.`,
	});
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ "–∑–∞–≤–∏—Å–∞–ª–∞"
	const currentConfig = await getUserConfig(chatId);
	const inlineKeyboard = currentConfig.regions.map((region) => [
		{
			text: `‚ùå ${region}`,
			callback_data: `delete_region:${region}`,
		},
	]);
	
	if (inlineKeyboard.length > 0) {
		await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
			chat_id: chatId,
			message_id: messageId,
			reply_markup: {
				inline_keyboard: inlineKeyboard,
			},
		});
	} else {
		await bot.editMessageText('–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã —É–¥–∞–ª–µ–Ω—ã.', {
			chat_id: chatId,
			message_id: messageId,
		});
	}
}

async function handleDeleteUser(
	adminId: number,
	callbackQueryId: string,
	messageId: number,
	data: string
) {
	// --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –±–∞–∑—ã, –∞ –Ω–µ Telegram ID ---
	// –≠—Ç–æ—Ç ID - —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `users` (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3...), –∞ –Ω–µ –æ–≥—Ä–æ–º–Ω—ã–π Telegram ID.
	const userDbIdToDelete = parseInt(data.substring('delete_user:'.length), 10);
	
	// --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN ---
	// –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ ID –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –≤ SQL.
	if (isNaN(userDbIdToDelete)) {
		logger.error(`–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ callback_data: ${data}`);
		await bot.answerCallbackQuery(callbackQueryId, { text: '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.' });
		return;
	}
	
	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	const userToDelete = await User.findByPk(userDbIdToDelete);
	
	if (!userToDelete) {
		await bot.answerCallbackQuery(callbackQueryId, { text: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.' });
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
		await bot.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.', {
			chat_id: adminId,
			message_id: messageId,
		});
		return;
	}
	
	// --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–¥–∞–ª—è–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é `id` ---
	const deletedCount = await User.destroy({
		where: { id: userDbIdToDelete },
	});
	
	if (deletedCount > 0) {
		logger.info(
			`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminId} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${userToDelete.username} (DB ID: ${userDbIdToDelete}).`
		);
		await bot.answerCallbackQuery(callbackQueryId, {
			text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userToDelete.username} —É–¥–∞–ª–µ–Ω.`,
		});
		
		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π Telegram ID
		if (userToDelete.userId) {
			try {
				await bot.sendMessage(
					userToDelete.userId,
					'–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
				);
			} catch (error: any) {
				logger.warn(
					`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userToDelete.userId} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).`
				);
			}
		}
	}
	
	// --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
	const remainingUsers = await User.findAll();
	if (remainingUsers.length > 0) {
		const newKeyboard = remainingUsers.map((user) => {
			const userIdText = user.userId ? `(${user.userId})` : '(–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)';
			return [{
				text: `‚ùå @${user.username} ${userIdText}`,
				callback_data: `delete_user:${user.id}`, // –°–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã
			}];
		});
		await bot.editMessageText(
			'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
			{
				chat_id: adminId,
				message_id: messageId,
				reply_markup: { inline_keyboard: newKeyboard },
			}
		);
	} else {
		// –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		await bot.editMessageText('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.', {
			chat_id: adminId,
			message_id: messageId,
		});
	}
}
