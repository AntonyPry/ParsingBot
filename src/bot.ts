import TelegramBot from 'node-telegram-bot-api';
import { BOT_TOKEN } from './config';
import { Configuration } from './database/models/Configuration';
import { REGIONS } from './constants/regions';
import { IUserConfig } from './types/config.types';
// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
import { triggerImmediateParse } from './scheduler';

if (!BOT_TOKEN) {
	throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
}

const userAction = new Map<number, 'add_region' | 'remove_region'>();

export const bot = new TelegramBot(BOT_TOKEN, { polling: true });

const MAIN_KEYBOARD = {
	reply_markup: {
		keyboard: [
			[{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω' }, { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω' }],
			[{ text: '–ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã' }],
		],
		resize_keyboard: true,
	},
};

// --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞ ---

async function getUserConfig(chatId: number): Promise<IUserConfig> {
	const config = await Configuration.findOne({ where: { userId: chatId } });
	if (config?.configData) {
		try {
			const parsed = JSON.parse(config.configData);
			if (Array.isArray(parsed.regions)) {
				return parsed;
			}
		} catch (e) {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
		}
	}
	return { regions: [] };
}

async function saveUserConfig(chatId: number, userConfig: IUserConfig) {
	await Configuration.upsert({
		userId: chatId,
		configData: JSON.stringify(userConfig),
	});
}

// --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

bot.onText(/\/start/, async (msg) => {
	const chatId = msg.chat.id;
	await bot.sendMessage(
		chatId,
		'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–º–∏.',
		MAIN_KEYBOARD,
	);
});

bot.on('message', async (msg) => {
	const chatId = msg.chat.id;
	const text = (msg.text || '').trim();
	
	if (userAction.has(chatId)) {
		const action = userAction.get(chatId);
		userAction.delete(chatId);
		
		if (action === 'add_region') {
			await handleAddRegion(chatId, text);
		}
		return;
	}
	
	switch (text) {
		case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω':
			userAction.set(chatId, 'add_region');
			await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 78 - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥).');
			break;
		
		case '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω':
			await showRegionsForDeletion(chatId);
			break;
		
		case '–ú–æ–∏ —Ä–µ–≥–∏–æ–Ω—ã':
			const currentConfig = await getUserConfig(chatId);
			if (currentConfig.regions.length === 0) {
				await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.');
			} else {
				await bot.sendMessage(chatId, `–í–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã:\n- ${currentConfig.regions.join('\n- ')}`);
			}
			break;
	}
});

// --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ ---

async function handleAddRegion(chatId: number, regionCode: string) {
	const regionName = REGIONS[regionCode];
	if (!regionName) {
		await bot.sendMessage(chatId, '–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
		return;
	}
	
	const regionValue = `${regionName} - ${regionCode}`;
	const config = await getUserConfig(chatId);
	
	if (config.regions.includes(regionValue)) {
		await bot.sendMessage(chatId, `–†–µ–≥–∏–æ–Ω "${regionName}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.`);
		return;
	}
	
	config.regions.push(regionValue);
	await saveUserConfig(chatId, config);
	
	await bot.sendMessage(chatId, `‚úÖ –†–µ–≥–∏–æ–Ω "${regionName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, MAIN_KEYBOARD);
	
	// --- –ù–û–í–´–ô –ë–õ–û–ö: –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ ---
	await bot.sendMessage(chatId, 'üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ–º—É —Ä–µ–≥–∏–æ–Ω—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...');
	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	await triggerImmediateParse(regionValue, chatId);
}

// --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ ---

async function showRegionsForDeletion(chatId: number) {
	const config = await getUserConfig(chatId);
	if (config.regions.length === 0) {
		await bot.sendMessage(chatId, '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.', MAIN_KEYBOARD);
		return;
	}
	
	const inlineKeyboard = config.regions.map(region => ([{
		text: `‚ùå ${region}`,
		callback_data: `delete_region:${region}`,
	}]));
	
	await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–≥–∏–æ–Ω, —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å:', {
		reply_markup: {
			inline_keyboard: inlineKeyboard,
		},
	});
}

bot.on('callback_query', async (callbackQuery) => {
	const message = callbackQuery.message;
	if (!message) return;
	const chatId = message.chat.id;
	const data = callbackQuery.data;
	
	if (data?.startsWith('delete_region:')) {
		const regionToDelete = data.substring('delete_region:'.length);
		const config = await getUserConfig(chatId);
		
		config.regions = config.regions.filter(r => r !== regionToDelete);
		await saveUserConfig(chatId, config);
		
		await bot.answerCallbackQuery(callbackQuery.id, { text: `–†–µ–≥–∏–æ–Ω "${regionToDelete}" —É–¥–∞–ª–µ–Ω.` });
		
		await bot.editMessageText('–†–µ–≥–∏–æ–Ω —É–¥–∞–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—â–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω" —Å–Ω–æ–≤–∞.', {
			chat_id: chatId,
			message_id: message.message_id,
		});
	}
});